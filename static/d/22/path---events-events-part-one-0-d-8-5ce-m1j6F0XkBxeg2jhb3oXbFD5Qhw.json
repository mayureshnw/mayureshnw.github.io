{"data":{"site":{"siteMetadata":{"title":"Tech Bites","author":"Mayuresh Waykole"}},"markdownRemark":{"id":"71fd72dc-f69f-5b39-917b-f04eb124a720","excerpt":"What is an Event ?In the simplest terms, an event is a notification within a software system.Why events?Looking at systems in terms of events can giveâ€¦","html":"<h4>What is an Event ?</h4>\n<p>In the simplest terms, an event is a notification within a software system.</p>\n<h4>Why events?</h4>\n<p>Looking at systems in terms of events can give exceptional clarity for certain use cases.\nTake the example of an Order management system. The flow looks something like this</p>\n<ul>\n<li>\n<p>Order is placed</p>\n<ul>\n<li>generate invoice</li>\n<li>send email to sales team and supplier</li>\n<li>send order to warehousing team</li>\n</ul>\n</li>\n</ul>\n<p>In the above flow, any action that happens after an order is placed, is dependent on it.\nIn a large system, you can find many such examples where an event in one subsytem is expected to trigger multiple actions in other subsystems.\nLooking at such dependencies from lens of events makes the flow of data obvious.</p>\n<p>From a design perspective, defining systems as event driven can allow for modularity and clarity.</p>\n<h5>Event driven programming</h5>\n<h4>&#x3C;></h4>\n<p>The most common operations to do with an event are </p>\n<ol>\n<li>Listen</li>\n<li>Emit</li>\n</ol>\n<p>A program that would like to take some action when an event has occured, <code class=\"language-text\">listens</code> for that event.</p>\n<p>A program <code class=\"language-text\">Emits</code> an Event when it would like to notify someone that some event has taken place.</p>\n<p>If we take the example of a simple calculator.\nPressing <code class=\"language-text\">=</code> should compute the value. of entered expression.\nThis means, that one function will emit an keyEvent called <code class=\"language-text\">&quot;KEY_EQUALS&quot;</code> when the <code class=\"language-text\">=</code> button is pressed and another function will listen for the event and run the calculate function.</p>\n<p>It would look something like this</p>\n<p>Emitter</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> key<span class=\"token punctuation\">.</span>value <span class=\"token keyword\">is</span> <span class=\"token string\">\"=\"</span><span class=\"token punctuation\">:</span>\n    Event<span class=\"token punctuation\">.</span>emit<span class=\"token punctuation\">(</span><span class=\"token string\">\"KEY_EQUALS\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Listener</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># parse input and calculate result</span>\n    \n\nEvent<span class=\"token punctuation\">.</span>listen<span class=\"token punctuation\">(</span><span class=\"token string\">\"KEY_EQUALS\"</span><span class=\"token punctuation\">,</span>  calculate<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">subscriptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> event <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> subscriptions<span class=\"token punctuation\">:</span>\n        subscriptions<span class=\"token punctuation\">[</span>event<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    subscriptions<span class=\"token punctuation\">[</span>event<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">)</span>\n    \n\n<span class=\"token keyword\">def</span> <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    subscribers <span class=\"token operator\">=</span> subscriptions<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> subscribers <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> cb <span class=\"token keyword\">in</span> subscribers<span class=\"token punctuation\">:</span>\n            cb<span class=\"token punctuation\">(</span>ezvent<span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"Events Part 1","date":"May 01, 2015","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/events/events-part-one/","previous":null,"next":{"fields":{"slug":"/hello-world/"},"frontmatter":{"title":"Hello World"}}}}